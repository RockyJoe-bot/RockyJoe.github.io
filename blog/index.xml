<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on codex</title>
    <link>http://RockyJoee.github.io/blog/</link>
    <description>Recent content in Blogs on codex</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© {year}</copyright>
    <lastBuildDate>Thu, 20 Aug 2020 00:59:46 +0800</lastBuildDate>
    
	<atom:link href="http://RockyJoee.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis的事务</title>
      <link>http://RockyJoee.github.io/blog/redis/</link>
      <pubDate>Thu, 20 Aug 2020 00:59:46 +0800</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/redis/</guid>
      <description>Redis事务： Redis单条命令是保持原子性的，但是事务不保证原子性,Redis事务没有隔离级别
Redis事务具有一次性，顺序性，排他性，此外Redis事务中所有命令会被序列化
 开启事务（multi）
命令入队
执行事务（exec）
分为编译时异常和运行时异常
若是编译时异常事务中所有命令都不会执行
若是运行时异常，执行命令时 错误命令抛异常，其他命令是可以正常执行的
取消事务（discard）</description>
    </item>
    
    <item>
      <title>Redis的数据类型（1）</title>
      <link>http://RockyJoee.github.io/blog/redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B1/</link>
      <pubDate>Thu, 20 Aug 2020 00:59:46 +0800</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B1/</guid>
      <description>Redis键以及数据类型：String, list, set,hash,Zset  Redis键（key）： keys * 查看所有的key
set 设置变量
exist key的名字 查询key是否存在
move key db 移除当前库的key eg: move name 1 移除数据库1中的key name
expire key 秒 给key设置生存时间，过期自动删除
ttl key 查看还有多少秒过期 -2表示已过期 -1表示永不过期
type key 查看key的类型
 String: set key value 设置值
get key 获取Key
del key 删除Key
append key &amp;quot;hello&amp;quot;  拼接字符串 (若不存在的Key进行append等同于set key &amp;ldquo;hello&amp;rdquo;)
strlen key 获取字符串长度
incrby(decrby) views 10 将储存的数字增长或减少10
范围range： getrange 获取指定范围内的值
setrange 设置指定范围的值
eg:getrange key 0 -1 获取全部的值</description>
    </item>
    
    <item>
      <title>Mysql语句报错</title>
      <link>http://RockyJoee.github.io/blog/mysql%E8%AF%AD%E5%8F%A5%E6%8A%A5%E9%94%99/</link>
      <pubDate>Fri, 14 Aug 2020 00:59:46 +0800</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/mysql%E8%AF%AD%E5%8F%A5%E6%8A%A5%E9%94%99/</guid>
      <description>在程序运行的时候Mysql语法报错
check the manual that corresponds to your MySQL server version for the right syntax to use near ‘-5，5’
看似是语法错误，首先检查Mysql分页语句语法并无错 其次检查分页代码，经过debug之后发现model的size=0 之前用flyway做数据迁移的时候字段并没有迁移过去，数据库内没有字段，所以首页读不出来关联数据库的数据模型。报的语法错误也是因为找不到相应的数据库字段，于是将字段补上就能够运行了。</description>
    </item>
    
    <item>
      <title>Redis的数据类型（2）</title>
      <link>http://RockyJoee.github.io/blog/redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2/</link>
      <pubDate>Fri, 14 Aug 2020 00:59:46 +0800</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2/</guid>
      <description>Redis特殊数据类型：geospatial，Hyperloglog,Bitmap  GEO地理位置： 首先GEO是redis 3.2版本后推出的 之前使用geoadd命令报错因为redis版本号为3.0
geoadd 将给定的空间元素（经度纬度名字）添加到指定的键里
geoadd key longitude latitude member
geopos key member 从key里返回给定元素的元素位置
geodist
geodist key member1 member2 [unit]
返回两个给定位置之间的距离，如果两个位置之间的其中一个不存在,那么命令返回空值。
指定单位的参数unit必须是以下单位的其中一个： m表示单位为米
km表示单位为千米 mi表示单位为英里
ft表示单位为英尺
如果用户没有显式地指定单位参数,那么geodist默认使用米作为单位。
georadius 给定经纬度为中心，找出某一半径内的元素 georadiusbymember 用于城市定位 eg: georadiusbymember china:city shanghai 1000km 找出Key中以上海为中心1000km内的城市
geohash将二维经纬度转换成一维的字符串
GEO底层实现是用zset 可以用zset命令操作geo
zrem china:city shanghai
zrange china:city 0 -1 等
 Hyperloglog: pfadd添加元素
pfcount 统计key元素基数数量
pfmerge 合并两组Key
 Bitmap:  位存储 应用：打卡，未打卡；登录，未登录等两种状态可用Bitmaps储存
 setbit key offset value设置操作
getbit key offset 读取offset设置的值（未设置返回0）</description>
    </item>
    
    <item>
      <title>数据库迁移Flyway</title>
      <link>http://RockyJoee.github.io/blog/flyway/</link>
      <pubDate>Fri, 14 Aug 2020 00:59:46 +0800</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/flyway/</guid>
      <description>初始配置
在maven的pom.xml下加入
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.flywaydb&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;flyway-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  起初用的Mysql数据库进行单独建表，后加入flyway插件进行数据库迁移，利用flyway进行数据库版本控制。在resources目录下创建db/migration后把原来的数据库脚本复制到V1__Create_user_table.sql文件下
启动命令: mvn flyway:migrate
出现报错 org.flywaydb.core.api.FlywayException: Found non-empty schema(s) user without schema history table! Use baseline() or set baselineOnMigrate to true to ini tialize the schema history table.
首先认为是在配置文件中application.properties没有配置flyway.baselineOnMigrate=true
flyway.enable=true
加上后仍报错，再将原存在的表格都删除后执行成功</description>
    </item>
    
    <item>
      <title>Linux基本命令（1）</title>
      <link>http://RockyJoee.github.io/blog/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A41/</link>
      <pubDate>Wed, 05 Aug 2020 00:59:46 +0800</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A41/</guid>
      <description> 进程管理 ps 查看系统中正在执行的进程 ps-a 显示当前所有正在进行的进程
ps-u 以用户的信息显示进程
ps-x　显示后台运行的参数
ps-aux｜grep mysql (查看mysql进程)
|(管道符)
grep 查找文件中符合条件的字符串
ps-ef 查看父进程信息
pstree -p 显示父Id
pstree -u 显示用户组    结束进程 kill-9+进程Id 查找全局文件 find ~ -name  查看日志 tail -f动态读取日志
tail -n查看最后几行日志 tail -fn 10 catalina.out｜grep by &#39;关键字&#39;动态查看最后10行的日志（使用关键字） 分页查询
ps-ef|less 查看进程并用less分页显示
shift + g命令到文件尾部 然后输入 ?加上你要搜索的关键字
按 n 向上查找关键字
shift+n 反向查找关键字
less和more的区别：less可以随意上下浏览 而more只能向下浏览 不能向上 而且 less 在查看之前不会加载整个文件  </description>
    </item>
    
    <item>
      <title>Mysql的版本</title>
      <link>http://RockyJoee.github.io/blog/mysql/</link>
      <pubDate>Wed, 05 Aug 2020 00:59:46 +0800</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/mysql/</guid>
      <description>在运行Mybatis generator的时候报错
java.sql.SQLException: com.mysql.cj.jdbc.Driver 查资料后发现
mysql 5用的驱动是com.mysql.jdbc.Driver
mysql 6用的驱动是com.mysql.cj.jdbc.Driver</description>
    </item>
    
    <item>
      <title>关于Postman上传Json失败</title>
      <link>http://RockyJoee.github.io/blog/postman%E4%B8%8A%E4%BC%A0json/</link>
      <pubDate>Wed, 05 Aug 2020 00:59:46 +0800</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/postman%E4%B8%8A%E4%BC%A0json/</guid>
      <description> 问题1 在项目中用Postman上传Json时，出现了报错
于是添加一个@Responsebody后仍然报错
在Postman中添加Content-Type为application/json
发送成功但显示的是封装的code和Message 为未登录状态    问题2
接下来解决未登录状态（项目实际已登录）
经过查阅资料发现因为Postman拿不到session于是手动添加该项目中的cookie和token到Postman中
发送成功 显示为封装后的登录成功状态  </description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>http://RockyJoee.github.io/blog/markdown-syntax-guide/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/markdown-syntax-guide/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>http://RockyJoee.github.io/blog/math-typesetting/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>http://RockyJoee.github.io/blog/rich-text/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/rich-text/</guid>
      <description>Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.
Instagram Simple Shortcode YouTube Privacy Enhanced Shortcode Twitter Simple Shortcode Vimeo Simple Shortcode </description>
    </item>
    
    <item>
      <title>Welcome To Codex</title>
      <link>http://RockyJoee.github.io/blog/example-post/</link>
      <pubDate>Thu, 04 Jun 2020 09:19:29 -0400</pubDate>
      
      <guid>http://RockyJoee.github.io/blog/example-post/</guid>
      <description>The standard Lorem Ipsum passage &amp;ldquo;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
  </channel>
</rss>